Question: 
Alternatively, to compare items in the cart, instead of using the Comparator class I have mentioned, 
you can use the Comparable interface1 and override the compareTo()method. You can refer to the Java docs 
to see the information of this interface. Suppose we are taking this Comparable interface approach.

Q: What class should implement the Comparable interface?
A: The class that should implement the Comparable interface is the class that represents the items in the cart. 
This could be a class named DvD, CD, Track, Media, Book.

Q: In those classes, how should you implement the compareTo()method to reflect the ordering that
we want?
A: The compareTo() method should be implemented in a way that reflects the desired ordering of the items. 
For example, if items should be ordered by title, then the compareTo() method could compare the titles of the items. 
If multiple criteria are used for ordering, the method should first compare the primary criterion, and if those are equal, move on to the secondary criterion, and so on.

Q: Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this
Comparable interface approach?
A: The Comparable interface allows for only one natural ordering. So if we have two ordering rules, we should use Comparator instead.


Q: Suppose the DVDs have a different ordering rule from the other media types, that is by title, then
decreasing length, then cost. How would you modify your code to allow this?
A: If DVDs need to be sorted differently from other items, I will create a subclass for DVDs that overrides the compareTo() method to implement the desired ordering. 
This would allow DVDs to be sorted by title, then decreasing length, then cost, while other items are sorted according to the rules defined in the superclass.
